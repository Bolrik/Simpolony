//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Data/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Simpolony
{
    public partial class @GameInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""68cf2612-d0d3-4f9e-923c-48f7b8168e90"",
            ""actions"": [
                {
                    ""name"": ""View Position"",
                    ""type"": ""Value"",
                    ""id"": ""fd6d4e14-2b3c-4818-8cf0-b0bfe003fff9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""e6087fa6-8a84-45b8-a8e0-cacd273506bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollValue"",
                    ""type"": ""Value"",
                    ""id"": ""eaa21710-cfb5-438d-9d26-255d0ebc63d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5c848e99-ddc3-49c0-87cf-d17f16efcaa5"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e4cdbe6-0297-4206-a989-ff6d335fda25"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28649138-dab9-4acd-9560-a53c0b3cdab2"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_ViewPosition = m_Player.FindAction("View Position", throwIfNotFound: true);
            m_Player_PrimaryButton = m_Player.FindAction("PrimaryButton", throwIfNotFound: true);
            m_Player_ScrollValue = m_Player.FindAction("ScrollValue", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_ViewPosition;
        private readonly InputAction m_Player_PrimaryButton;
        private readonly InputAction m_Player_ScrollValue;
        public struct PlayerActions
        {
            private @GameInput m_Wrapper;
            public PlayerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @ViewPosition => m_Wrapper.m_Player_ViewPosition;
            public InputAction @PrimaryButton => m_Wrapper.m_Player_PrimaryButton;
            public InputAction @ScrollValue => m_Wrapper.m_Player_ScrollValue;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @ViewPosition.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnViewPosition;
                    @ViewPosition.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnViewPosition;
                    @ViewPosition.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnViewPosition;
                    @PrimaryButton.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPrimaryButton;
                    @PrimaryButton.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPrimaryButton;
                    @PrimaryButton.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPrimaryButton;
                    @ScrollValue.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScrollValue;
                    @ScrollValue.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScrollValue;
                    @ScrollValue.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScrollValue;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ViewPosition.started += instance.OnViewPosition;
                    @ViewPosition.performed += instance.OnViewPosition;
                    @ViewPosition.canceled += instance.OnViewPosition;
                    @PrimaryButton.started += instance.OnPrimaryButton;
                    @PrimaryButton.performed += instance.OnPrimaryButton;
                    @PrimaryButton.canceled += instance.OnPrimaryButton;
                    @ScrollValue.started += instance.OnScrollValue;
                    @ScrollValue.performed += instance.OnScrollValue;
                    @ScrollValue.canceled += instance.OnScrollValue;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        public interface IPlayerActions
        {
            void OnViewPosition(InputAction.CallbackContext context);
            void OnPrimaryButton(InputAction.CallbackContext context);
            void OnScrollValue(InputAction.CallbackContext context);
        }
    }
}
